{
  "name": "protobufjs",
  "version": "0.12.9",
  "description": "ProtoBuf.js: protobuf for JavaScript. No compilation step required, works out of the box.",
  "author": {
    "name": "Daniel Wirtz",
    "email": "dcode@dcode.io"
  },
  "contributors": [
    {
      "name": "Frank Xu",
      "email": "yyfrankyy@gmail.com"
    }
  ],
  "main": "ProtoBuf.js",
  "bin": {
    "proto2js": "./bin/proto2js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/dcodeIO/ProtoBuf.js.git"
  },
  "bugs": {
    "url": "https://github.com/dcodeIO/ProtoBuf.js/issues"
  },
  "keywords": [
    "net",
    "buffer",
    "protobuf",
    "serialization",
    "bytebuffer",
    "websocket",
    "webrtc"
  ],
  "dependencies": {
    "bytebuffer": ">=1.3.3"
  },
  "devDependencies": {
    "nodeunit": ">=0.7",
    "preprocessor": ">=1.0.2",
    "closurecompiler": ">=1.1"
  },
  "license": "Apache License, Version 2.0",
  "engines": {
    "node": ">=0.8"
  },
  "scripts": {
    "prepublish": "npm test",
    "test": "nodeunit tests/suite.js",
    "make": "npm run-script build && npm run-script compile && npm test && npm run-script jsdoc",
    "build": "node build.js",
    "compile": "npm run-script compile-full && npm run-script compile-noparse",
    "compile-full": "ccjs ProtoBuf.js --create_source_map=ProtoBuf.min.map --compilation_level=SIMPLE_OPTIMIZATIONS > ProtoBuf.min.js",
    "compile-noparse": "ccjs ProtoBuf.noparse.js --create_source_map=ProtoBuf.noparse.min.map --compilation_level=SIMPLE_OPTIMIZATIONS > ProtoBuf.noparse.min.js",
    "jsdoc": "jsdoc -c jsdoc.json"
  },
  "readme": "![ProtoBuf.js - protobuf for JavaScript](https://raw.github.com/dcodeIO/ProtoBuf.js/master/ProtoBuf.png)\r\n=====================================\r\n\r\nA protobuf implementation on top of [ByteBuffer.js](https://github.com/dcodeIO/ByteBuffer.js) including a .proto parser,\r\nreflection, message class building and simple encoding and decoding in plain JavaScript. No compilation step required,\r\nworks out of the box on .proto files. It's also used for the cross-platform multiplayer component in\r\n[eSoccer](http://www.esoccer.me), an HTML5 game developed at [University of Applied Sciences Bonn](http://www.h-brs.de).\r\n\r\nFeatures\r\n--------\r\n* [CommonJS](http://www.commonjs.org/) compatible\r\n* [RequireJS](http://requirejs.org/)/AMD compatible\r\n* Shim compatible (include the script, then use `var ProtoBuf = dcodeIO.ProtoBuf;`)\r\n* [node.js](http://nodejs.org) compatible, also available via [npm](https://npmjs.org/package/protobufjs)\r\n* [Closure Compiler](https://developers.google.com/closure/compiler/) compatible (fully annotated, [externs](https://github.com/dcodeIO/ProtoBuf.js/tree/master/externs))\r\n* Fully documented using [jsdoc3](https://github.com/jsdoc3/jsdoc)\r\n* Well tested through [nodeunit](https://github.com/caolan/nodeunit)\r\n* [ByteBuffer.js](https://github.com/dcodeIO/ByteBuffer.js) is the only production dependency\r\n* Small footprint (even smaller if you use a noparse build)\r\n\r\nBuilder\r\n-------\r\nProbably the core component of ProtoBuf.js. Resolves all type references, performs all the necessary checks and returns\r\nready to use classes. Can be created from a .proto file or from a JSON definition. The later does not even require the\r\n.proto parser to be included ([see](https://github.com/dcodeIO/ProtoBuf.js#using-json-without-the-proto-parser)).\r\n\r\nInstall: `npm install protobufjs`\r\n\r\n#### Using .proto files ####\r\n\r\nExample: [tests/complex.proto](https://github.com/dcodeIO/ProtoBuf.js/tree/master/tests/complex.proto)\r\n\r\n```javascript\r\nvar ProtoBuf = require(\"protobufjs\");\r\n\r\nvar builder = ProtoBuf.protoFromFile(\"tests/complex.proto\");\r\nvar Game = builder.build(\"Game\");\r\nvar Car = Game.Cars.Car;\r\n\r\n// Construct with arguments list in field order:\r\nvar car = new Car(\"Rusty\", new Car.Vendor(\"Iron Inc.\", new Car.Vendor.Address(\"US\")), Car.Speed.SUPERFAST);\r\n\r\n// OR: Construct with values from an object, implicit message creation (address) and enum values as strings:\r\nvar car = new Car({\r\n    \"model\": \"Rusty\",\r\n    \"vendor\": {\r\n        \"name\": \"Iron Inc.\",\r\n        \"address\": {\r\n            \"country\": \"US\"\r\n        }\r\n    },\r\n    \"speed\": \"SUPERFAST\" // also equivalent to \"speed\": 2\r\n});\r\n\r\n// OR: It's also possible to mix all of this!\r\n\r\n// Afterwards, just encode your message:\r\nvar buffer = car.encode();\r\n\r\n// And send it over the wire:\r\nvar socket = ...;\r\nsocket.send(buffer.toArrayBuffer());\r\n\r\n// OR: Short...\r\nsocket.send(car.toArrayBuffer());\r\n```\r\n\r\n#### Putting multiple .proto files into a common namespace ####\r\n\r\nExample: [tests/example1.proto](https://github.com/dcodeIO/ProtoBuf.js/tree/master/tests/example1.proto),\r\n[tests/example2.proto](https://github.com/dcodeIO/ProtoBuf.js/tree/master/tests/example2.proto)\r\n\r\n```javascript\r\nvar builder = ProtoBuf.protoFromFile(\"tests/example1.proto\");\r\nProtoBuf.protoFromFile(\"tests/example2.proto\", builder);\r\nvar root = builder.build();\r\nvar test1 = new root.Test1(123);\r\nvar test2 = new root.Test2(\"123\");\r\n...\r\n```\r\n\r\n#### Using JSON without the .proto parser ####\r\n\r\nExample: [tests/complex.json](https://github.com/dcodeIO/ProtoBuf.js/tree/master/tests/complex.json)\r\n\r\n```javascript\r\nvar ProtoBuf = require(\"protobufjs\");\r\n\r\nvar builder = ProtoBuf.newBuilder();    // Alternatively:\r\nbuilder.define(\"Game\");                 // var builder = ProtoBuf.newBuilder(\"Game\");\r\nbuilder.create([\r\n      {\r\n          \"name\": \"Car\",\r\n          \"fields\": [\r\n              {\r\n                  \"rule\": \"required\",\r\n                  \"type\": \"string\",\r\n                  \"name\": \"model\",\r\n                  \"id\": 1\r\n              },\r\n              ...\r\n          ],\r\n          \"messages\": [\r\n              {\r\n                  \"name\": \"Vendor\",\r\n                  \"fields\": ...,\r\n              },\r\n              ...\r\n          ],\r\n          \"enums\": [\r\n              {\r\n                  \"name\": \"Speed\",\r\n                  \"values\": [\r\n                      {\r\n                          \"name\": \"FAST\",\r\n                          \"id\": 1\r\n                      },\r\n                      ...\r\n                  ]\r\n              }\r\n          ]\r\n      }\r\n]);\r\n\r\nvar Game = builder.build(\"Game\");\r\nvar Car = Game.Cars.Car;\r\n... actually the same as above ...\r\n```\r\n\r\nWhen using JSON only, you can use [ProtoBuf.noparse.js](https://github.com/dcodeIO/ProtoBuf.js/blob/master/ProtoBuf.noparse.js)\r\n/ [ProtoBuf.noparse.min.js](https://github.com/dcodeIO/ProtoBuf.js/blob/master/ProtoBuf.noparse.min.js) instead, which\r\ndo NOT include the `ProtoBuf.DotProto` package for parsing and are therefore even smaller.\r\n\r\nEncoder / Decoder\r\n-----------------\r\nBuilt into all message classes. Just call `YourMessage#encode([buffer])` respectively `YourMessage.decode(buffer)`.\r\n\r\n#### Encoding a message ####\r\n\r\n```javascript\r\n...\r\nvar YourMessage = builder.build(\"YourMessage\");\r\nvar myMessage = new YourMessage(...);\r\nvar byteBuffer = myMessage.encode();\r\nvar buffer = byteBuffer.toArrayBuffer();\r\n\r\n// OR: Short...\r\nvar buffer = myMessage.toArrayBuffer();\r\n\r\nvar socket = ...; // E.g. a WebSocket\r\nsocket.send(buffer);\r\n```\r\n\r\n#### Decoding from an ArrayBuffer/ByteBuffer ####\r\n\r\n```javascript\r\n...\r\nvar YourMessage = builder.build(\"YourMessage\");\r\nvar buffer = ...; // E.g. a buffer received on a WebSocket\r\nvar myMessage = YourMessage.decode(buffer);\r\n```\r\n\r\nCommand line utility\r\n--------------------\r\nIt's also possible to transform .proto files into their JSON counterparts or to transform entire namespaces into\r\nready-to-use message classes and enum objects by using the `proto2js` command line utility.\r\n\r\n```\r\n  Usage: proto2js protoFile [-class[=My.Package]|-commonjs[=My.Package]|-amd[=My.Package]] [-min] [> outFile]\r\n\r\n  Options:\r\n\r\n    -class[=My.Package]     Creates the classes instead of just a JSON definition.\r\n                            If you do not specify a package, the package\r\n                            declaration from the .proto file is used instead.\r\n\r\n    -commonjs[=My.Package]  Creates a CommonJS export instead of just a JSON def.\r\n                            If you do not specify a package, the package\r\n                            declaration from the .proto file is used instead.\r\n\r\n    -amd[=My.Package]       Creates an AMD define instead of just a JSON def.\r\n                            If you do not specify a package, the package\r\n                            declaration from the .proto file is used instead.\r\n\r\n    -min                    Minifies the output.\r\n```\r\n\r\nSo, to create a JSON definition from the [tests/complex.proto](https://github.com/dcodeIO/ProtoBuf.js/blob/master/tests/complex.proto)\r\nfile, run:\r\n\r\n```bash\r\nproto2js tests/complex.proto > tests/complex.json\r\n```\r\n\r\nOr to create classes/a CommonJS export/an AMD define for the entire `Game` namespace, run:\r\n\r\n```bash\r\nproto2js tests/complex.proto -class=Game > tests/complex.js\r\n```\r\n\r\n```bash\r\nproto2js tests/complex.proto -commonjs=Game > tests/complex.js\r\n# ^ The resulting code will implicitly call require(\"protobufjs\");\r\n```\r\n\r\n```bash\r\nproto2js tests/complex.proto -amd=Game.Cars > tests/complex.js\r\n# ^ The resulting code will implicitly use [\"ProtoBuf\"] as its\r\n#   declared dependencies and \"Game/Cars\" as the module name\r\n```\r\n\r\nParser\r\n------\r\nOnly available in the full build (i.e. not in \"noparse\" builds). Compliant with the protobuf parser to the following extend:\r\n\r\n* Required, optional, repeated and packed repeated fields:\r\n\r\n  ```protobuf\r\n  message Test {\r\n      required int32 a = 1;\r\n      optional int32 b = 2 [default=100];\r\n      repeated int32 c = 3;\r\n      repeated int32 c = 4 [packed=true];\r\n  }\r\n  ```\r\n\r\n* Data types: int32, uint32, sint32, fixed32, sfixed32, int64, uint64, sint64, fixed64, sfixed64, bool, enum, string,\r\n  bytes, messages, embedded messages, float, double\r\n  \r\n  ```protobuf\r\n  message Test {\r\n      required int32 a = 1; // Varint encoded\r\n      required uint32 b = 2; // Varint encoded\r\n      required sint32 c = 3; // Varint zigzag encoded\r\n      required bool d = 4; // Varint encoded\r\n    \r\n      enum Priority {\r\n          LOW = 1;\r\n          MEDIUM = 2;\r\n          HIGH = 3;\r\n      }\r\n    \r\n      optional Priority e = 5 [default=MEDIUM]; // Varint encoded\r\n      required string f = 6; // Varint length delimited\r\n      required bytes g = 7; // Varint length delimited\r\n      required Embedded h = 8; // Varint length delimited\r\n    \r\n      message Embedded {\r\n          repeated int32 a = 1; // Multiple tags\r\n          repeated int32 b = 2 [packed=true]; // One tag, length delimited\r\n          \r\n          required sfixed32 c = 3; // Fixed 4 bytes int32\r\n          required fixed32 d = 4; // Fixed 4 bytes uint32\r\n          required float e = 5; // Fixed 4 bytes\r\n          required double f = 6; // Fixed 8 bytes\r\n          \r\n          // Through ByteBuffer.js loaded with Long.js:\r\n          optional int64 g = 7; // Varint encoded\r\n          optional uint64 h = 8; // Varint encoded\r\n          optional sint64 i = 9; // Varint zigzag encoded\r\n          required sfixed64 j = 10; // Fixed 8 bytes int64\r\n          required fixed64 k = 11; // Fixed 8 bytes uint64\r\n      }\r\n  }\r\n  ```\r\n  \r\n* Packages\r\n\r\n  ```protobuf\r\n  package My.Game;\r\n  \r\n  message Test {\r\n      ...\r\n  }\r\n  \r\n  message Test2 {\r\n      required My.Game.Test test = 1;\r\n  }\r\n  ```\r\n  \r\n* Qualified and fully qualified name resolving:\r\n\r\n  ```protobuf\r\n  package My.Game;\r\n  \r\n  message Test {\r\n      ...\r\n      \r\n      enum Priority {\r\n          LOW = 1;\r\n          MEDIUM = 2;\r\n          HIGH = 3;\r\n      }\r\n  }\r\n  \r\n  message Test2 {\r\n      required .My.Game.Test.Priority priority_fqn = 1 [default=LOW];\r\n      required Test.Priority priority_qn = 2 [default=MEDIUM];\r\n  }\r\n  ```  \r\n\r\n* Options on all levels:\r\n  \r\n  ```protobuf\r\n  option toplevel_1 = 10;\r\n  option toplevel_2 = \"Hello!\";\r\n  \r\n  message Test {\r\n      option inmessage = \"World!\";\r\n      optional int32 somenumber = 1 [default=123]; // Actually the only one used\r\n  }\r\n  ```\r\n  \r\n  Paranthesis around option names, like `option (inmessage) = ...` are ignored for compatibility with custom options.\r\n  Accessing arbitrary options on namespace objects emitted by a builder is also possible (requires an ECMAScript 5 /\r\n  Javascript 1.8.5 compatible environment, e.g. node.js or any modern browser):\r\n  \r\n  ```javascript\r\n  ...\r\n  var root = builder.build();\r\n  console.log(root.$options); // { 'toplevel_1': 10, 'toplevel_2': 'Hello!' }\r\n  console.log(root.Test.$options); // { 'inmessage': 'World!' }\r\n  ```\r\n\r\n* Imports:\r\n\r\n  ```protobuf\r\n  package My; // Not used by the following imports\r\n  import public \"example1.proto\"; // The \"public\" keyword is ignored\r\n  import \"example2.proto\";\r\n  \r\n  message Test2 {\r\n      required Test1 test1 = 0; // Unique name\r\n      required .Test2 test2 = 1; // Duplicate name resolved absolutely\r\n  }\r\n  ```\r\n  \r\n  See also: [example1.proto](https://github.com/dcodeIO/ProtoBuf.js/tree/master/tests/example1.proto),\r\n  [example2.proto](https://github.com/dcodeIO/ProtoBuf.js/tree/master/tests/example2.proto)\r\n  \r\n  ```javascript\r\n  var builder = ProtoBuf.protoFromFile(\"tests/imports.proto\");\r\n  var root = builder.build();\r\n  // root now contains:\r\n  // - .Test1\r\n  // - .Test2\r\n  // - .My.Test2 using .Test1 for field 'test1' and .Test2 for field 'test2'\r\n  ```\r\n  \r\n  **NOTE:** Importing .proto files is available in the full build (not in the noparse build) only. Importing the .json\r\n  counterpart of a .proto file (e.g. generated by proto2js) is supported regardless of the build you are using. Imports\r\n  are also always fetched *synchronously*, so it's a good idea to package everything into a single file when using it in\r\n  the browser.\r\n  \r\n* Extensions:\r\n  \r\n  ```protobuf\r\n  extend something {\r\n      ...\r\n  }\r\n  ```\r\n  \r\n  ```protobuf\r\n  import \"google/protobuf/descriptor.proto\";\r\n  ```\r\n  \r\n  These statements are actually simply ignored to make existing definitions compile fine. Low-level bootstrapping\r\n  is not required by ProtoBuf.js.\r\n  \r\n#### Not (yet) supported ####\r\n* *Extensions* (what for?) and *services* (you roll your own, don't you?). If you need anything of this, please open an\r\n  issue and explain your exact requirements. It's just that I have no idea how to benefit from that and therefore I am\r\n  not sure how to design it.\r\n\r\n#### Calling the parser on your own ####\r\n  \r\n```javascript\r\nvar ProtoBuf = require(\"protobufjs\"),\r\n    fs = require(\"fs\"),\r\n    util = require(\"util\");\r\n\r\nvar parser = new ProtoBuf.DotProto.Parser(fs.readFileSync(\"tests/complex.proto\"));\r\nvar ast = parser.parse();\r\nconsole.log(util.inspect(ast, false, null, true));\r\n```\r\n\r\nCommonJS, AMD and browser (shim)\r\n--------------------------------\r\n\r\n#### node.js / CommonJS ####\r\n\r\n```bash\r\nnpm install protobufjs\r\n```\r\n\r\n```javascript\r\nvar ProtoBuf = require(\"protobufjs\");\r\n...\r\n```\r\n\r\n#### RequireJS / AMD ####\r\n\r\nRequires [ByteBuffer.js](http://github.com/dcodeIO/ByteBuffer.js). Optionally depends on [Long.js](https://github.com/dcodeIO/Long.js)\r\nfor long (int64) support. If you do not require long support, you can skip the Long.js config. [Require.js](http://requirejs.org/)\r\nexample:\r\n\r\n```javascript\r\nrequire.config({\r\n    ...\r\n    \"paths\": {\r\n        \"Long\": \"/path/to/Long.js\",\r\n        \"ByteBuffer\": \"/path/to/ByteBuffer.js\",\r\n        \"ProtoBuf\": \"/path/to/ProtoBuf.js\"\r\n    },\r\n    ...\r\n});\r\nrequire([\"ProtoBuf\"], function(ProtoBuf) {\r\n    ...\r\n});\r\n```\r\n\r\nOr as a module dependency:\r\n\r\n```javascript\r\ndefine(\"MyModule\", [\"ProtoBuf\"], function(ProtoBuf) {\r\n    ...\r\n});\r\n```\r\n\r\n#### Browser (shim) ####\r\n\r\nRequires [ByteBuffer.js](http://github.com/dcodeIO/ByteBuffer.js). Optionally depends on [Long.js](https://github.com/dcodeIO/Long.js)\r\nfor long (int64) support. If you do not require long support, you can skip the Long.js include.\r\n\r\n```html\r\n<script src=\"//raw.github.com/dcodeIO/Long.js/master/Long.min.js\"></script>\r\n<script src=\"//raw.github.com/dcodeIO/ByteBuffer.js/master/ByteBuffer.min.js\"></script>\r\n<script src=\"//raw.github.com/dcodeIO/ProtoBuf.js/master/ProtoBuf.min.js\"></script>\r\n```\r\n\r\n```javascript\r\nvar ProtoBuf = dcodeIO.ProtoBuf;\r\n...\r\n```\r\n\r\nOn long (int64) support\r\n-----------------------\r\nFull 64bit support is available since 0.10.0 and requires ByteBuffer.js >=1.2.3 with Long.js >=1.1.2.\r\n* [See also](https://github.com/dcodeIO/ByteBuffer.js#on-long-int64-support)\r\n\r\nOn endianess before 0.11\r\n--------------------------\r\nTill 0.10, ProtoBuf.js mistakenly used big endian byte order when en-/decoding non-varint values as [reported by\r\nbertdouglas](https://github.com/dcodeIO/ProtoBuf.js/pull/5). This has been corrected in 0.11.0. However, versions before\r\n0.11 are now to consider **incompatible** with later versions when using non-varint values, so please upgrade to the\r\nlatest version to ensure compatibility with the official protobuf specification.\r\n\r\nDownloads\r\n---------\r\n* [ZIP-Archive](https://github.com/dcodeIO/ProtoBuf.js/archive/master.zip)\r\n* [Tarball](https://github.com/dcodeIO/ProtoBuf.js/tarball/master)\r\n\r\nDocumentation\r\n-------------\r\n* [View documentation](http://htmlpreview.github.com/?http://github.com/dcodeIO/ProtoBuf.js/master/docs/ProtoBuf.html)\r\n\r\nTests (& Examples) [![Build Status](https://travis-ci.org/dcodeIO/ProtoBuf.js.png?branch=master)](https://travis-ci.org/dcodeIO/ProtoBuf.js)\r\n------------------\r\n* [View source](https://github.com/dcodeIO/ProtoBuf.js/blob/master/tests/suite.js)\r\n* [View node report](https://travis-ci.org/dcodeIO/ProtoBuf.js)\r\n* [View browser report](http://htmlpreview.github.com/?http://github.com/dcodeIO/ProtoBuf.js/master/tests/suite.html)\r\n\r\nContributors\r\n------------\r\n[Frank Xu](https://github.com/yyfrankyy)\r\n\r\nLicense\r\n-------\r\nApache License, Version 2.0 - http://www.apache.org/licenses/LICENSE-2.0.html\r\n",
  "readmeFilename": "README.md",
  "_id": "protobufjs@0.12.9",
  "dist": {
    "shasum": "cd7db079534f1b42a51e9f1628bebb88ca6350b5"
  },
  "_from": "protobufjs@",
  "_resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-0.12.9.tgz"
}
